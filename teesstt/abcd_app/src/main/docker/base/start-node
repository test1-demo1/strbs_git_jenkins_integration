#!/bin/sh
#
# script to start node inside docker container
#
# Requires :
#
#   STREAMING_PRODUCT_HOME      the location of the Streaming installation
#   STREAMING_RUNTIME_HOME      the location of nodes, application and configuration
#   STREAMING_NODENAME          the node name to use
#
# Optionally :
#
#   STREAMING_NODEDEPLOY        path of node deploy configuration file (default is to use application archive)
#   STREAMING_SUBSTITUTIONS     substitution parameters (default is none)
#   STREAMING_SUBSTITUTIONFILE  path of substitutions file
#   STREAMING_ADMINPORT         administration port
#   STREAMING_DEPLOYDIRECTORIES comma separated list of deployment directories
#   STREAMING_KEYSTORE          path to the keystore file containing the master secret
#   STREAMING_KEYSTOREPASSWORD  The password for the keystore file
#
# The variables can be set on the Docker commandline :
#    
#    docker run --env=STREAMING_NODENAME=A.X ...
#
# or set in Kubernetes Pod, Deployment or StatefulSet yaml configuration :
#
#    env:
#    - name: STREAMING_NODENAME
#      value: A.X
#
# The Kubernets yaml configurations can further be parameterised via Helm values :
#
#    env:
#    - name: STREAMING_NODENAME
#      value: {{ .Values.nodeName }}
#
# Variables used for files can reference files included in the Docker image.  Test
# configurations from src/main/test/configurations are added to the Docker image 
# at /var/opt/tibco/streambase/configuration/, and test resources from
# src/main/test/resources are added to the Docker image at /var/opt/tibco/streambase/resources.
#
# Hence a Kubernets configuration for a node deployment file could be :
#
#    env:
#    - name: STREAMING_NODEDEPLOY
#      value: "/var/opt/tibco/streambase/configuration/node.conf"
#
# Files can be supplied external to the Docker image via Kubernetes ConfigMap :
#
#    apiVersion: v1
#    kind: ConfigMap
#    metadata:
#      name: configuration
#    data:
#      node.conf: |-
#        name = "ef-kubernetes-app"
#        version = "2.0.0"
#        type = "com.tibco.ep.dtm.configuration.node"
#        configuration = {
#            NodeDeploy = {
#                nodes = {
#                    "${EP_NODE_NAME}" = {
#                        nodeType = "docker"
#                    }
#                }
#            }
#        }
#
# and mounted as a volume :
#
#    spec:
#      volumes:
#        - name: configuration
#          configMap:
#            name: configuration
#    containers:
#      - name: ef-kubernetes-app
#        volumeMounts:
#        - name: configuration
#          mountPath: /var/opt/tibco/streambase/configuration
#     env:
#     - name: STREAMING_NODEDEPLOY
#       value: "/var/opt/tibco/streambase/configuration/node.conf"
#
# See Docker, Kubernetes and Helm documentation for further details.
#

#
# backwards compatibility
#
if [ "${NODENAME}" != "" ]
then
	STREAMING_NODENAME=${NODENAME}
fi

if [  "${STREAMING_NODENAME}" == "" ]
then
    echo "STREAMING_NODENAME is not set, use --env to set on the docker command line"
    exit 1
fi

#
# required for openshift - see https://docs.okd.io/latest/creating_images/guidelines.html#openshift-specific-guidelines
#
if ! whoami &> /dev/null; then
  if [ -w /etc/passwd ]; then
    echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
  fi
fi

#
# create install node arguments
#
application="$(ls -1t ${STREAMING_RUNTIME_HOME}/application/*.zip | head -1)"
echo "Installing application archive ${application}"
echo
args="--application=${application}"
if [ "${STREAMING_NODEDEPLOY}" != "" ]
then
    args="${args} --nodedeploy=${STREAMING_NODEDEPLOY}"
fi
if [ "${STREAMING_SUBSTITUTIONS}" != "" ]
then
    args="${args} --substitutions=${STREAMING_SUBSTITUTIONS}"
fi
if [ "${STREAMING_SUBSTITUTIONFILE}" != "" ]
then
    args="${args} --substitutionfile=${STREAMING_SUBSTITUTIONFILE}"
fi
if [ "${STREAMING_ADMINPORT}" != "" ]
then
    args="${args} --adminport=${STREAMING_ADMINPORT}"
fi
if [ "${STREAMING_DEPLOYDIRECTORIES}" != "" ]
then
    args="${args} --deploydirectories=${STREAMING_DEPLOYDIRECTORIES}"
fi
if [ "${STREAMING_KEYSTORE}" != "" ]
then
    args="${args} --keystore=${STREAMING_KEYSTORE}"
fi
if [ "${STREAMING_KEYSTOREPASSWORD}" != "" ]
then
    args="${args} --keystorepassword=${STREAMING_KEYSTOREPASSWORD}"
fi

#
# clean up from any previous run
#
rm -rf ${STREAMING_RUNTIME_HOME}/node/${STREAMING_NODENAME}

#
# install and start nodes
#
epadmin --username=${USER_NAME} --password=${USER_NAME} install node \
    --nodename=${STREAMING_NODENAME} \
    --nodedirectory=${STREAMING_RUNTIME_HOME}/node \
    ${args}
epadmin --servicename=${STREAMING_NODENAME} start node

#
# indicate that we've started and wait
#
echo "COMMAND FINISHED"
sleep infinity
